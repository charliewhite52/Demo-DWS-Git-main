from models import Department, SkillLevel, ShiftTypefrom datetime import datetime, timedeltaclass BaseOptimizer():        def _shifts_violate_24h_separation(self, shift1, shift2, shift_times):        """Check if two shifts violate 24-hour separation rule"""                date1 = datetime.strptime(shift1.date, "%Y-%m-%d")        date2 = datetime.strptime(shift2.date, "%Y-%m-%d")                start1, end1 = shift_times[shift1.shift_type]        start2, end2 = shift_times[shift2.shift_type]                abs_start1 = date1 + timedelta(hours=start1)        abs_end1 = date1 + timedelta(hours=end1 if end1 >= start1 else end1 + 24)                abs_start2 = date2 + timedelta(hours=start2)        abs_end2 = date2 + timedelta(hours=end2 if end2 >= start2 else end2 + 24)                time_between_shifts = min(            abs((abs_start2 - abs_end1).total_seconds() / 3600),  # Gap between end1 and start2            abs((abs_start1 - abs_end2).total_seconds() / 3600)   # Gap between end2 and start1        )        return time_between_shifts < 24            def _is_qualified(self, employee, shift):        """Simple qualification check"""        if employee.department != shift.department:            return shift.priority >= 4          return True        def _get_shift_hours(self, shift_type):        """Get hours for each shift type"""        hours_map = {            ShiftType.MORNING_SHIFT: 8,            ShiftType.STANDARD_SHIFT: 8,            ShiftType.AFTERNOON_SHIFT: 8,            ShiftType.NIGHT_SHIFT: 8,            ShiftType.ON_CALL: 24        }        return hours_map.get(shift_type, 8)