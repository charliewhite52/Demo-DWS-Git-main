from dataclasses import dataclassfrom typing import List, Dict, Setfrom enum import Enumfrom pydantic import BaseModelfrom datetime import datetime, timedeltaclass Department(Enum):    AD_OPS = "ad_operations"    ENGINEERING = "engineering"    SALES = "sales"    ACCOUNT_MANAGEMENT = "account_management"    SUPPORT = "support"class SkillLevel(Enum):    JUNIOR = "junior"    MID = "mid"    SENIOR = "senior"    LEAD = "lead"class ShiftType(Enum):    MORNING_SHIFT = "morning"  # 6AM-2PM    AFTERNOON_SHIFT = "swing"  # 2PM-10PM    NIGHT_SHIFT = "night"  # 10PM-6AM    STANDARD_SHIFT = "day" # 9AM-5PM    ON_CALL = "on_call"    class ScheduleConstraints(BaseModel):    max_overtime: int = 10    min_rest_hours: int = 11    max_consecutive_shifts: int = 5    require_qualifications: bool = True    enforce_department_matching: bool = Trueclass BusinessRules(BaseModel):    require_senior_cover: bool = True    traffic_based_staffing: bool = True    respect_shift_preferences: bool = True    minimize_costs: bool = True    balance_workload: bool = True@dataclassclass Employee:    id: str    name: str    department: Department    skill_level: SkillLevel    skills: Set[str]    max_hours_per_week: int = 40    cost_per_hour: float = 22.80    preferred_shift: ShiftType = None    timezone: str = "EST"    is_remote: bool = True        # PubMatic specific attributes    certifications: Set[str] = None    supported_regions: Set[str] = None    on_call_capacity: bool = False        def __post_init__(self):        if self.certifications is None:            self.certifications = set()        if self.supported_regions is None:            self.supported_regions = {"NA"} @dataclassclass AdTrafficForecast:    date: str    hour: int    expected_impressions: int      region: str    traffic_tier: str  @dataclassclass Shift:    id: str    date: str    shift_type: ShiftType    department: Department    required_skill_level: SkillLevel    required_skills: Set[str]    min_employees: int    max_employees: int    region: str = "NA"    priority: int = 1  # 1-5, with 5 being highest        # Derived from traffic forecasts    expected_traffic: int = 0@dataclassclass ScheduleRequest():    start_date: str    end_date: str    employees: List[Employee]    shifts: List[Shift]    constraints: Dict    business_rules: Dict@dataclassclass ScheduleResponse:    assignments: Dict[str, List[str]]    metrics: Dict    total_cost: float    coverage_score: float    risk_assessment: Dict    